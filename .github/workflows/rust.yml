name: Rust Cross Compile and Release

on:
  push:
    branches: ["master"]
    tags:
      - "v*"
    paths:
      - ".github/workflows/rust.yml"

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc
          - aarch64-apple-darwin
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            runner: windows-latest
          - target: aarch64-pc-windows-msvc
            runner: windows-latest
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        run: |
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            sudo apt-get install -y libc6-dev-arm64-cross
          fi
        shell: bash

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export PKG_CONFIG_ALLOW_CROSS=1
            export OPENSSL_DIR=/usr/aarch64-linux-gnu
            export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
            export OPENSSL_INCLUDE_DIR=/usr/include/aarch64-linux-gnu
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package
        shell: bash
        run: |
          echo "VERSION=$(grep 'version =' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_ENV
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.target }}" == *"-pc-windows-"* ]]; then
            OS="windows"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="zip"
            7z a ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping.exe
          elif [[ "${{ matrix.target }}" == *"-apple-darwin" ]]; then
            OS="macos"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="tar.gz"
            tar czvf ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping
          else
            OS="linux"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="tar.gz"
            tar czvf ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping
          fi
          cd -
          ls -l tcpping-*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tcpping-${{ matrix.target }}
          path: tcpping-*.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "VERSION=$(grep 'version =' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_ENV
          gh release create "tcpping-$VERSION" -t "tcpping v$VERSION" --generate-notes
          for asset in tcpping-*/tcpping-*; do
            gh release upload "${GITHUB_REF##*/}" "$asset" --prerelease --clobber
          done
