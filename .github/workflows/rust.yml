name: Rust Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc
          - aarch64-apple-darwin
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            runner: windows-latest
          - target: aarch64-pc-windows-msvc
            runner: windows-latest
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        run: |
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            sudo apt-get install -y libssl-dev:arm64
            sudo apt-get install -y libc6-dev-arm64-cross
          fi
        shell: bash

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export PKG_CONFIG_ALLOW_CROSS=1
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.target }}" == *"-pc-windows-"* ]]; then
            OS="windows"
            ARCH=$(echo "${{ matrix.target }}" | cut -d'-' -f1)
            7z a ../../../tcpping-v${VERSION}-${OS}-${ARCH}.zip tcpping.exe
          else
            OS=$(if [[ "${{ matrix.target }}" == *"-apple-darwin" ]]; then echo "macos"; else echo "linux"; fi)
            ARCH=$(echo "${{ matrix.target }}" | cut -d'-' -f1)
            tar czvf ../../../tcpping-v${VERSION}-${OS}-${ARCH}.tar.gz tcpping
          fi
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: tcpping-${{ matrix.target }}
          path: tcpping-v*.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          gh release create ${GITHUB_REF} \
            --title "tcpping ${GITHUB_REF}" \
            --notes "Release ${GITHUB_REF}" \
            tcpping-*/tcpping-v*
