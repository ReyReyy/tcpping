name: Rust Cross Compile and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    # 移除这一行
    # if: github.ref == 'refs/heads/master'

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc
          - aarch64-apple-darwin
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            runner: windows-latest
          - target: aarch64-pc-windows-msvc
            runner: windows-latest
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        run: |
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
        shell: bash

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.target }}" == *"-pc-windows-"* ]]; then
            OS="windows"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="zip"
            7z a ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping.exe
          elif [[ "${{ matrix.target }}" == *"-apple-darwin" ]]; then
            OS="macos"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="tar.gz"
            tar czvf ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping
          else
            OS="linux"
            if [[ "${{ matrix.target }}" == "x86_64-"* ]]; then
              ARCH="x86_64"
            else
              ARCH="aarch64"
            fi
            EXT="tar.gz"
            tar czvf ../../../tcpping-v${VERSION}-${OS}-${ARCH}.${EXT} tcpping
          fi
          cd -
          ls -l tcpping-*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: tcpping-${{ matrix.target }}
          path: tcpping-v*.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: tcpping ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') }}

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in tcpping-*/tcpping-v*; do
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name"
            gh release upload ${{ github.ref_name }} "$asset" --clobber
          done
